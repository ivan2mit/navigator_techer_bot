import logging
import time
import requests
import json
from dotenv import load_dotenv
import os
import re
from datetime import datetime, timedelta
from cryptography.fernet import Fernet
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.helpers import escape_markdown
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)


# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'user_data.json'


# --- –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª ---
def save_user_data():
    data_to_save = {}
    for user_id, data in user_data.items():
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ encrypted_password ‚Äî bytes
        enc_pass = data['encrypted_password']
        if isinstance(enc_pass, str):
            # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Å—Ç–∞–ª str ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞, –Ω–æ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è
            logger.warning(f"–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ‚Äî —Å—Ç—Ä–æ–∫–∞, –∞ –Ω–µ bytes")
            enc_pass_str = enc_pass
        else:
            # –û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å: bytes ‚Üí str
            enc_pass_str = enc_pass.decode('utf-8')

        data_to_save[str(user_id)] = {
            'email': data['email'],
            'encrypted_password': enc_pass_str,
            'last_login': data['last_login'].isoformat() if data['last_login'] else None
        }

    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data_to_save, f, ensure_ascii=False, indent=2)
# --- –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ ---
def load_user_data():
    if not os.path.exists(DATA_FILE):
        return {}

    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        content = f.read().strip()
        if not content:
            return {}
        data = json.loads(content)

    loaded = {}
    for user_id_str, user_info in data.items():
        user_id = int(user_id_str)
        # üîπ –ü–∞—Ä–æ–ª—å: str ‚Üí bytes
        enc_pass = user_info['email']  # ‚ùå –û–®–ò–ë–ö–ê: —Ç—ã —á–∏—Ç–∞–µ—à—å login –∫–∞–∫ –ø–∞—Ä–æ–ª—å?
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ:
        enc_pass_bytes = user_info['encrypted_password'].encode('utf-8')

        # üîπ –î–∞—Ç–∞: str ‚Üí datetime
        last_login_dt = None
        if user_info.get('last_login'):
            try:
                last_login_dt = datetime.fromisoformat(user_info['last_login'])
            except ValueError:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è {user_id}")
                last_login_dt = None

        loaded[user_id] = {
            'email': user_info['email'],  # –∏–ª–∏ 'email' ‚Äî —Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –≤ JSON
            'encrypted_password': enc_pass_bytes,
            'last_login': last_login_dt,  # ‚Üê datetime, –∞ –Ω–µ str
            'session': None
        }
    return loaded

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


# –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ 32 –±–∞–π—Ç–∞, base64-encoded)
# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑: from cryptography.fernet import Fernet; print(Fernet.generate_key())
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á
key_str = os.getenv("FERNET_KEY")
FERNET_KEY = os.getenv("FERNET_KEY")
fernet = Fernet(FERNET_KEY)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # ‚Üê –ó–∞–º–µ–Ω–∏—Ç—å
BASE_URL = os.getenv("BASE_URL")

# URL —Å–∞–π—Ç–∞
LOGIN_URL =BASE_URL+'api/user/login'
CHECK_URL = BASE_URL+'api/rest/order'
ENDPOINT_PARENT = BASE_URL+'api/rest/siteuser/{user_id}'
ORDER_URL = BASE_URL+'admin/#requests/edit/{order_id}'
KID_URL = BASE_URL+'api/rest/kid'
EVENT_URL = BASE_URL+'api/rest/events' # –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ(–Ω–∞–∑–≤–∞–Ω–∏–µ–± –≤–æ–∑—Ä–∞—Å—Ç —Å—Å—ã–ª–∫–∞)
EVENTGROUP_URL = BASE_URL+'api/rest/eventGroups' # –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–∞—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã
EVENTGROUPSCHEDULE_URL = BASE_URL+'api/rest/eventGroupSchedule'
# –ó–∞–≥–æ–ª–æ–≤–∫–∏, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ –±—Ä–∞—É–∑–µ—Ä
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    "X-Requested-With": "XMLHttpRequest",
    'Content-Type': "application/json; charset=utf-8",
    'Accept': 'application/json',
}

STATUS_MAP = {
    "initial":   "üÜï –ù–æ–≤–∞—è",
    "pause":     "‚è∏Ô∏è –û—Ç–ª–æ–∂–µ–Ω–∞",
    "approve":   "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
    "cancel":    "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞",
    "study":     "üéì –û–±—É—á–∞–µ—Ç—Å—è",
}

WEEKDAYS_MAP = {
    1: '–ü–ù',
    2: '–í–¢',
    3: '–°–†',
    4: '–ß–¢',
    5: '–ü–¢',
    6: '–°–ë',
    0: '–í–°'
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
LOGIN, PASSWORD = range(2)
# –°–æ—Å—Ç–æ—è–Ω–∏—è
LOGIN, PASSWORD, FIO, WAITING_FOR_COMMENT = range(4)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî –ª—É—á—à–µ –ë–î)
user_data = {}  # {user_id: {email, encrypted_password, session, last_login}}


# --- –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è ---
def encrypt_password(password: str) -> bytes:
    return fernet.encrypt(password.encode())

def decrypt_password(encrypted_password: bytes) -> str:
    return fernet.decrypt(encrypted_password).decode()


# --- –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ ---
def create_authenticated_session(email: str, password: str) -> requests.Session | None:
    session = requests.Session()
    session.headers.update(HEADERS)

    try:
        response = session.post(LOGIN_URL, json={'email': email, 'password': password}, timeout=10)
        if response.status_code == 200:
            data = response.json()
            token = data["data"]["access_token"]
            if not token:
                logger.warning("–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                return None
            session.headers['Authorization'] = f'Bearer {token}'
            logger.info("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞, —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return session
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.status_code} ‚Äî {response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    return None


# --- –£–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 30 –º–∏–Ω—É—Ç) ---
_last_error_time = {}


# --- –î–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user_id = update.effective_user.id

#        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –§–ò–û
#     if 'fio' not in user_data[user_id] or not user_data[user_id]['fio']:
#         await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤):")
#         return FIO

#     if user_id in user_data:
#         await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
#         return ConversationHandler.END

#     await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
#     return LOGIN

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in user_data:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
        return LOGIN

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –§–ò–û
    if 'fio' not in user_data[user_id] or not user_data[user_id]['fio']:
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤):")
        return FIO

    await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    return ConversationHandler.END

async def login_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    email = update.message.text.strip()
    context.user_data["temp_email"] = email
    await update.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (—Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ):")
    return PASSWORD

async def fio_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    fio = update.message.text.strip()

    if user_id in user_data:
        user_data[user_id]['fio'] = fio

    await update.message.reply_text(f"‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {fio}\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
    return ConversationHandler.END

async def password_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    password = update.message.text
    email = context.user_data["temp_email"]

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º
    try:
        await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –®–∏—Ñ—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    try:
        encrypted_password = encrypt_password(password)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    # –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏
    session = create_authenticated_session(email, password)
    if not session:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    user_data[user_id] = {
        "email": email,
        "fio": context.user_data.get("temp_fio", "–ë–µ–∑ –§–ò–û"),  
        "encrypted_password": encrypted_password,
        "session": session,
        "last_login": datetime.now(),
    }

    save_user_data()
    await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω).")

    return ConversationHandler.END

def create_action_buttons(order_id: int):
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"action:{order_id}:approve"),
            InlineKeyboardButton("‚è∏Ô∏è –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"action:{order_id}:pause"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"action:{order_id}:cancel")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def list_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id not in user_data:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return

    user = user_data[user_id]
    session = user["session"]
    email = user["email"]
    encrypted_password = user["encrypted_password"]


    async def get_parent(id):
        try:
            URL = ENDPOINT_PARENT.format(user_id = id)
            # TODO –ø–µ—Ä–µ–¥–∞—Ç—å –ø–∞—Ä–∞–º
            response = session.get(URL, params={'_dc': int(time.time() * 1000)}, timeout=10)
            if response.status_code == 200:
                return response.json()['data']
            else:
                raise Exception(f'–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—è {response.status_code}')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–π—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


    async def get_event_group(id):
        try:
            URL = EVENTGROUP_URL
            params = {
                'format': 'mini',
                '_dc': int(time.time() * 1000),
                'id': {id},
                'page': '1',
                'start':'0',
                'length':'100'
            }
            # TODO –ø–µ—Ä–µ–¥–∞—Ç—å –ø–∞—Ä–∞–º
            response = session.get(URL, params=params, timeout=10)
            if response.status_code == 200:
                return response.json()['data']
            else:
                raise Exception(f'–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã {response.status_code}')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–π—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


    async def get_event_group_schedule(id):
        try:
            URL = EVENTGROUPSCHEDULE_URL
            str_id = str(id)
            params = {
                '_dc': int(time.time() * 1000),
                'page': '1',
                'start':'0',
                'length':'25',
                'extFilters': '[{"property":"group_id","value":"'+f'{id}'+'"}]'
            }
            # TODO –ø–µ—Ä–µ–¥–∞—Ç—å –ø–∞—Ä–∞–º
            response = session.get(URL, params=params, timeout=10)
            if response.status_code == 200:
                return response.json()['data']
            else:
                raise Exception(f'–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {response.status_code}')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–π—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


    async def get_orders():
        apps = response.json()["data"]
        if apps:
            for order in apps:
                parent = await get_parent(order['site_user_id'])
                event_group = await get_event_group(order['group_id'])
                group_schedule = await get_event_group_schedule(order['group_id'])
                # –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ —Å—Å—ã–ª–∫–∞
                # –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–Ω–∏ –æ–±—É—á–µ–Ω–∏—è
                # –ó–∞—è–≤–∏—Ç–µ–ª—å: —Ñ–∏–æ, –Ω–æ–º–µ—Ä, —Å—Å—ã–ª–∫–∞
                # –£—á–µ–Ω–∏–∫: –§–ò, –≤–æ–∑—Ä–∞—Å—Ç
                # –°—Ç–∞—Ç—É—Å—ã –°–ù–ò–õ–° –ê–î–†–ï–°–° —à–∫–æ–ª–∞
                if parent is not None:
                    phone: str = parent[0]['phone']
                    clear_phone = phone.replace('(','').replace(')','').replace('-','').replace(' ','')
                    phone = escape_markdown(phone, version=2)
                    clear_md_phone = escape_markdown(clear_phone, version=2)
                link_order = ORDER_URL.format(order_id = order['id'])
                status = order['state']
                status = escape_markdown(STATUS_MAP[status],2)
                event_name = escape_markdown(event_group[0]['name'],2)
                event_schedule = ''
                for days in group_schedule:
                    event_schedule += ', '.join([WEEKDAYS_MAP[day] for day in days['week_days']])
                    event_schedule += escape_markdown(' ' + days['time_start']+'-'+days['time_end'],2)+'\n'
                parent_fio = escape_markdown(order['site_user_fio'],2)
                link_tg = escape_markdown(f't.me/{clear_phone}',2)

                text = (f'{status} [–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ]({link_order})\n'
                        f'{event_name}\n'
                        f'{event_schedule}\n'
                        f'*–£—á–µ–Ω–∏–∫:* {order['kid_last_name']} {order['kid_first_name']}\n'
                        f'*–†–æ–¥–∏—Ç–µ–ª—å:* {parent_fio} {clear_md_phone}\n'
                        f'{ link_tg}')
                #text = escape_markdown(text, version=2)
                reply_markup = create_action_buttons(order['id'])

                reply_markup = None
                # if order['state'] == "initial":  # –∏–ª–∏ status == "–ù–æ–≤–∞—è", —Å–º–æ—Ç—Ä–∏, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç
                #     reply_markup = create_action_buttons(order['id'])

                await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='MarkdownV2')
        else:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏
        params = {'_dc': int(time.time() * 1000),  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                'page': 1,
                'start': 0,
                'length': 150,
                'extFilters': '[{"property":"fact_academic_year_id","value":2025,"comparison":"eq"}]'
                }
        response = session.get(CHECK_URL, params=params, timeout=10)
        if response.status_code == 200:
            await get_orders()
        elif response.status_code == 401:
            # –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω ‚Äî –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏–º—Å—è
            await update.message.reply_text("üîÑ –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –≤—ã–ø–æ–ª–Ω—è—é –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥...")
            try:
                password = decrypt_password(encrypted_password)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}")
                await update.message.reply_text("üîí –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞. –ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
                return

            new_session = create_authenticated_session(email, password)
            if new_session:
                user["session"] = new_session
                user["last_login"] = datetime.now()
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                retry_response = new_session.get(CHECK_URL, timeout=10)
                if retry_response.status_code == 200:
                    get_orders()
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞.")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å.")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∞–π—Ç–∞: {response.status_code}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–π—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def send_approval_comment(query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE, user_id: int, order_id: int, comment_suffix: str):
    # –ß—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å update
    chat_id = query.message.chat_id
    message_id = query.message.message_id

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    date_str = datetime.now().strftime("%d.%m")
    fio = user_data[user_id].get('fio', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    comment = f"{date_str} {fio} {comment_suffix}"

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ —Å–µ—Å—Å–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    session = user_data[user_id]['session']
    if session is None:
        try:
            password = decrypt_password(user_data[user_id]['encrypted_password'])
            session = create_authenticated_session(user_data[user_id]['email'], password)
            if not session:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é.")
                return
            user_data[user_id]['session'] = session
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            await query.edit_message_text("üîí –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.")
            return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    url = f"https://techdo.sirius-ft.ru/api/rest/order/{order_id}/approve"
    payload = {"comment": comment}

    try:
        # response = session.post(url, json=payload, timeout=10)
        if True or response.status_code == 200:
            # ‚úÖ –£—Å–ø–µ—Ö: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –¢–û –ñ–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
            current_text = query.message.text
            updated_text = re.sub(
                r'^(üÜï|‚è∏Ô∏è|‚úÖ|‚ùå|üéì)[^\n]*\n',
                "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n",
                current_text,
                count=1,
                flags=re.MULTILINE
            )
            await query.edit_message_text(
                text=updated_text,
                reply_markup=None
                # parse_mode –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º!
            )
        else:
            # ‚ùå –û—à–∏–±–∫–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = create_action_buttons(order_id)
            await query.edit_message_text(
                text=current_text + "\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.",
                reply_markup=keyboard
                # parse_mode –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {e}")
        keyboard = create_action_buttons(order_id)
        await query.edit_message_text(
            text=query.message.text + "\n\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.",
            reply_markup=keyboard
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if 'pending_approval' in context.user_data:
        order_id = context.user_data.pop('pending_approval')
        custom_comment = update.message.text.strip()

        await send_approval_comment(update, context, user_id, order_id, custom_comment)

# async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     query = update.callback_query
#     await query.answer()

#     data = query.data  # action:12345:approve
#     if not data.startswith("action:"):
#         return

#     try:
#         _, order_id, action = data.split(":")
#         order_id = int(order_id)
#         user_id = query.from_user.id

#         # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
#         current_text = query.message.text

#         # –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–æ–∂–∏–¥–∞–Ω–∏–µ"
#         waiting_markup = InlineKeyboardMarkup([[
#             InlineKeyboardButton("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...", callback_data="wait")
#         ]])
#         await query.edit_message_reply_markup(reply_markup=waiting_markup)

#         # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
#         #success = await send_action_request(user_id, order_id, action)
#         success = 1

#         # –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
#         new_status = STATUS_MAP.get(action, "üîÑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

#         # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç: –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
#         import re
#         updated_text = re.sub(
#             r'^(üÜï|‚è∏Ô∏è|‚úÖ|‚ùå|üéì)[^\n]*\n|(?<=\n)(üÜï|‚è∏Ô∏è|‚úÖ|‚ùå|üéì)[^\n]*\n',
#             f"{new_status}\n",
#             current_text,
#             count=1,
#             flags=re.MULTILINE
#         )

#         if success:
#             # ‚úÖ –£—Å–ø–µ—Ö: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
#             await query.edit_message_text(
#                 text=updated_text,
#                 reply_markup=None
#             )
#         else:
#             # ‚ùå –û—à–∏–±–∫–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
#             original_buttons = create_action_buttons(order_id)  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è
#             await query.edit_message_text(
#                 text=current_text + "\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
#                 reply_markup=original_buttons
#             )

#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")
#         # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏
#         try:
#             order_id = int(data.split(":")[1])
#             original_buttons = create_action_buttons(order_id)
#             await query.edit_message_text(
#                 text=query.message.text + "\n\n‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
#                 reply_markup=original_buttons,
#                 parse_mode='MarkdownV2'
#             )
#         except:
#             await query.edit_message_text(
#                 text=query.message.text + "\n\n‚ùå –û—à–∏–±–∫–∞.",
#                 reply_markup=None
#             )
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –∑–Ω–∞–µ—Ç –ø–æ–¥ –∫–∞–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∏ —á—Ç–æ –º—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    query = update.callback_query
    await query.answer()

    data = query.data.split(':')

    button = data[0]
    if button == 'action':
        _, order_id, action = data
        user_id = query.from_user.id
    
        

        if user_id not in user_data:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞.")
            return
    order_id = data[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É
    if button == "action" and action == "approve":
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–ª–∞—Ç–Ω–æ", callback_data=f"confirm:{order_id}:–ø–ª–∞—Ç–Ω–æ"),
                InlineKeyboardButton("üèõ –°—É–±—Å–∏–¥–∏—è", callback_data=f"confirm:{order_id}:—Å—É–±—Å–∏–¥–∏—è"),
            ],
            [
                InlineKeyboardButton("‚úèÔ∏è –î—Ä—É–≥–æ–µ", callback_data=f"custom:{order_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_reply_markup(reply_markup=reply_markup)

    elif button == "confirm":
        # –£–∂–µ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø
        _, order_id, comment_type = data.split(":", 2)
        await send_approval_comment(update, context, user_id, int(order_id), comment_type)

    elif button == "custom":
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        context.user_data['pending_approval'] = order_id
        await query.edit_message_text(
            "üñã –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–±—é–¥–∂–µ—Ç', '–≥—Ä–∞–Ω—Ç' –∏ —Ç.–ø.):"
        )
    # else:
    #     # –î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (pause, cancel) ‚Äî –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    #     await handle_simple_action(query, user_id, order_id, action)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

def restore_all_sessions():
    for user_id, user in user_data.items():
        if user['session'] is None:
            try:
                password = decrypt_password(user['encrypted_password'])
                session = create_authenticated_session(user['email'], password)
                if session:
                    user['session'] = session
                    user['last_login'] = datetime.now()
                    logger.info(f"–°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {user_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è {user_id}: {e}")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    global user_data
    user_data = load_user_data()  # üîÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_data)}")

    application = Application.builder().token(BOT_TOKEN).build()
    restore_all_sessions()
    # –î–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_received)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, password_received)],
            FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, fio_received)],
        },
        fallbacks=[],
    )

    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)
    application.add_handler(CommandHandler("list", list_applications))
    application.add_handler(CallbackQueryHandler(button_handler))
    # application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    import atexit
    atexit.register(save_user_data)
    application.run_polling()


if __name__ == "__main__":
    main()